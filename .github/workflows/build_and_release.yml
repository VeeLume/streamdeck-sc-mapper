name: Build and Release Stream Deck Plugin (Rust)

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    env:
      # ===== tweak if you rename things =====
      PLUGIN_CRATE: streamdeck-sc-mapper
      PLUGIN_BUNDLE: icu.veelume.sc-mapper.sdPlugin
      BINARY_DST: icu.veelume.sc-mapper.exe

      CLI_CRATE: scmap-gen
      CLI_BIN: scmap-gen.exe
      # ======================================

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version (major.minor.patch.build)
        id: version
        shell: pwsh
        run: |
          $tag="${env:GITHUB_REF_NAME}".TrimStart("v")   # e.g. 1.2.3
          $build="${{ github.run_number }}"              # monotonically increasing per repo
          $full="$tag.$build"                            # e.g. 1.2.3.418
          "tag=$tag"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "build=$build" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "full=$full" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref_type == 'tag' }}

      # Lint/compile the whole workspace
      - name: Rust preflight (workspace)
        shell: pwsh
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets --all-features
          cargo check  --workspace --all-targets --all-features

      # Verify BOTH crates match the tag (they use workspace.version)
      - name: Verify crate versions match tag
        shell: pwsh
        env:
          TAG: ${{ steps.version.outputs.tag }}
        run: |
          $meta = cargo metadata --no-deps --format-version 1 | Out-String | ConvertFrom-Json

          $plugin = $meta.packages | Where-Object { $_.name -eq $env:PLUGIN_CRATE }
          if (-not $plugin) { throw "Could not find plugin crate '$env:PLUGIN_CRATE' in workspace" }
          if ($plugin.version -ne $env:TAG) {
            throw "Plugin Cargo.toml version ($($plugin.version)) != tag ($env:TAG)"
          }

          $cli = $meta.packages | Where-Object { $_.name -eq $env:CLI_CRATE }
          if (-not $cli) { throw "Could not find CLI crate '$env:CLI_CRATE' in workspace" }
          if ($cli.version -ne $env:TAG) {
            throw "CLI Cargo.toml version ($($cli.version)) != tag ($env:TAG)"
          }

      # ─────────────────────────────────────────
      # Build plugin
      # ─────────────────────────────────────────
      - name: Build plugin (release)
        shell: pwsh
        run: cargo build -p "$env:PLUGIN_CRATE" --release --all-features

      - name: Detect plugin binary path
        id: bin_plugin
        shell: pwsh
        run: |
          $exe = "target\release\$env:PLUGIN_CRATE.exe"
          if (!(Test-Path $exe)) { throw "Missing built exe at $exe" }
          "path=$exe" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Place binary into .sdPlugin bundle
        shell: pwsh
        env:
          BIN_SRC: ${{ steps.bin_plugin.outputs.path }}
        run: |
          New-Item -ItemType Directory -Force -Path "$env:PLUGIN_BUNDLE" | Out-Null
          Copy-Item "$env:BIN_SRC" "$env:PLUGIN_BUNDLE\$env:BINARY_DST" -Force

      - name: Sync manifest version to tag+build
        shell: pwsh
        run: |
          $manifest = Join-Path $env:PLUGIN_BUNDLE 'manifest.json'
          if (Test-Path $manifest) {
            $j = Get-Content $manifest -Raw | ConvertFrom-Json
            $j.Version = "${{ steps.version.outputs.full }}"  # 1.2.3.418
            $j | ConvertTo-Json -Depth 64 | Set-Content $manifest -Encoding UTF8
          } else {
            Write-Host "No manifest.json at $manifest (skipping)"
          }

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Stream Deck CLI
        shell: pwsh
        run: npm install -g @elgato/cli@latest

      - name: Pack .streamDeckPlugin
        shell: pwsh
        run: streamdeck pack "$env:PLUGIN_BUNDLE"

      # ─────────────────────────────────────────
      # Build CLI
      # ─────────────────────────────────────────
      - name: Build CLI (release)
        shell: pwsh
        run: cargo build -p "$env:CLI_CRATE" --release --all-features

      - name: Collect CLI artifact
        id: bin_cli
        shell: pwsh
        run: |
          $exe = "target\release\$env:CLI_BIN"
          if (!(Test-Path $exe)) { throw "Missing built CLI exe at $exe" }
          $posix = $exe -replace '\\','/'
          "path_win=$exe" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "path_posix=$posix" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            *.streamDeckPlugin
            ${{ steps.bin_cli.outputs.path_posix }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.streamDeckPlugin
            ${{ steps.bin_cli.outputs.path_posix }}
          fail_on_unmatched_files: true
          generate_release_notes: true
